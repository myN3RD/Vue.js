Vue is an Javascript Framework

for building websites & user interfaces

Its an Fontend Library

popular with Node.js and Express

Virtual DOM

when using a frontend framework you THINK IN UI COMPONENTS




<template>
                        HTML5 UI ELEMENTS
</template>



<script>
                        JS DATA & LOGIC
</script>


        data is synchronized with the UI
         JS                          HTML5






install


add this to an html file:

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>






    data() {                  -> data needs to return an object
        return {
            
        }
    }
})  





                    PRODUCTION ENVIRONMENT SETTINGS (for deploying on a production server (localhost))
            
_________________________________________________________


stop the running app first

run npm run build -> will create a folder "dist" -> this is what we deploy

for testing run sudo npm i -g serve -> this will serve the dist folder


                    START APP
                   ___________
              
                  serve -s dist
                  
                  
                  
                  
                  
                      dev SERVER ENVIRONMENT SETTINGS (for deploying to a dev Server)
            
_________________________________________________________  

START:
npm run serve



create a file in the root -> vue.config.js

copy paste:
                  
                  // only for running in the dev Server NOT in production
                      module.exports = {
                        devServer: {
                          proxy: {
                            '^/api': {
                              target: 'http://localhost:3000',
                              changeOrigin: true,
                              logLevel: 'debug',
                              pathRewrite: {
                                '^/api': '/'
                              },
                            }
                          }
                        }
                      }









to use a var in vue we have to use {{ var }}



ACTUALLY the side will be showen before ist completly rendered:

          V-CLOAK
-> we use v-cloak to surpress these from happening (side will be showen when its fully rendered)

   +

<style>

[v-cloak] {
        display: none;
    }

</style>



keywords:

v-model="var"       (will update the var input)


v-if="argument"  (if true it will show up, is false this will not show up, also not in the console)
v-show=""        (this will show the object still in the DOM console (if the argument is false))
v-else-if=""
v-else        takes NO argument!



<div v-if="isVisible" class="box"></div>
<div v-else-if="isVisible" class="box"></div>
<div v-else class="box"></div>




          V-BIND

v-bind:label
      :label  (same)




                    EVENT & METHODS
            
_________________________________________________________

@click                   short equivalent version
@mouseover="argument"
....

v-on:type of event="argument"

v-on:click="isVisible = true"

how to it inVisible now again?          ->        v-on:click="isVisible = !isVisible"               (Toggle Event - changes from true to false)


                     LOOPS
          
v-for="task 




.prevent 

stop the form for example from their default behavior -> which is in this case to refresh the page after submitting

<form @submit.prevent="handleSubmit">




                    COMPONENTS
            
_________________________________________________________


is like breaking up an application in several components

Outer Components
Inner Components


we can pass PROPS into a component


props: {
            title: String,
        }
        


we have to define a 

template  for each component!


          LOGIN COMPONENT

                      app.component('login-form', {
                          template: `
                          <form @submit.prevent="handleSubmit">     
                              <h1>{{ title }}</h1>
                              <input type="email" v-model="email" />
                              <input type="password" v-model="password" />
                              <button>Log in</button>
                          </form>
                          `,
                          data() {
                              return {
                                  title: 'Login Form',
                                  email: '',
                                  password: ''
                              }
                          },
                          methods: {
                              handleSubmit() {
                                  console.log(this.email, this.password)
                              }
                          }
                      })
                      
                      



                    DIRECTIVES
            
_________________________________________________________



                    VUE CLI (state management)
                    
    https://cli.vuejs.org/guide/installation.html
_________________________________________________________

in terminal:
sudo npm install -g @vue/cli

in terminal:
vue create filename
vue create vue-crashcourse

ab 22min -> follow allong -> https://www.youtube.com/watch?v=qZXt1Aom3Cs&t=1297s&ab_channel=TraversyMedia



vscode terminal:

npm run serve
-> by default -> localhost:8080



when using  $emit.....

when err in console
[Vue: warn] emits event listeners (deleteTask) were passed to component but could not be automatically inherited 

Solution

we have to add emit to the app as a method



                    ROUTER (core view layer)
            
_________________________________________________________




                    JSON (full fake REST API) SERVER
            
_________________________________________________________


npm i json-server

START JSON SERVER:

json-server --watch db.json


if we want to put it into a script: -> json-server --watch db.json --port XXXX

-> create a file -> db.json (in. root) -> put in the json data

NOW we can run  -> npm start  start filename


now we can check if the "backend" is running

Resources
  http://localhost:3000/tasks
  
DONT CLOSE THE RUNNING APP NOW! -> OPEN A NEW TAB IN CONSOLE -> npm run serve (Vue dev server)















